openapi: 3.0.0
info:
  title: Cookbook-OpenAPI
  version: '1.0'
  contact:
    name: Chef
    url: low_calory_cookbook.com
    email: colory_master@gmail.com
  license:
    name: GNU General Public License v3.0
  description: Retrieve low-calory recipes.
servers:
  - url: 'http://localhost:3000'
paths:
  '/recipes/{id}/ingredients':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: GET
      tags: []
      operationId: get-recipes-ingredients
      description: Retreive the list of ingredients for a specific recipe.
      parameters:
        - schema:
            type: string
            example: banana
          in: query
          name: item
          description: The ingredient that you want in your recipe. Not case sensitive.
          required: true
        - schema:
            type: string
            enum:
              - metric
              - imperial
            default: metric
          in: query
          name: units
          description: 'Display the units as **metric** or **imperial**. Default: ''metric'''
        - schema:
            type: string
            default: weight
            enum:
              - weight
              - volume
          in: query
          name: amount
          description: 'Display the amount of ingredient needed as a **weight** (e.g. grams/ounces) or as a **volume** measured in cups and spoons. Default: ''weight'' '
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: object
  /recipes:
    get:
      summary: GET endpoint
      tags:
        - recipes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: Banana and yoghurt parfait
                    maxLength: 50
                    description: Unique descriptive title for the recipe.
                  description:
                    type: string
                    description: Short paragraph summarising the recipe.
                    maxLength: 160
                    example: A simple delicious creamy treat with a hint of cinnamon.
                  photo:
                    type: string
                  calories:
                    type: number
                    example: 100
                    readOnly: true
                  preparation time:
                    type: number
                    readOnly: true
                  type:
                    type: string
                    enum:
                      - vegan
                      - vegetarian
                      - unknown
                    example: vegan
                    default: unknown
              examples:
                Banana and yoghurt parfait:
                  value:
                    name: string
                    description: string
                    photo: string
                    calories: 100
                    preparation time: 0
                    type: vegan
        '404':
          description: Resource not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  Message:
                    type: string
                    example: Resource not found.
              examples:
                Recipe not found:
                  value:
                    Message: Recipe not found.
      operationId: get-recipes
      parameters:
        - schema:
            type: array
            example:
              - '[0,200]'
          in: query
          name: calories
          description: 'Range of calories from min to max. '
        - schema:
            type: integer
            example: 60
          in: query
          name: time
          description: Max. preparation time in minutes.
        - schema:
            type: string
            example: Banana and yoghurt parfait
            maxLength: 50
          in: query
          name: name
          description: Unique descriptive title for the recipe. Max. 50 characters. Search can include grep patterns.
        - schema:
            type: string
          in: query
          name: ingredient
      description: |-
        Search for recipes based on {name}, {ingredient}, {calories} or preparation {time}. Returns a recipe summary that includes an image, name and description. 

        If no query parameter is set a list of all recipes (paginated) will be returned sorted by recipe id. All stated string lengths are inlusive of spaces.
    parameters: []
  '/recipes/{id}/preparation':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
      operationId: get-recipes-id-methods
      description: Retrieve the methods for a specific recipe.
  '/recipes/{recipeId}':
    parameters:
      - $ref: '#/components/parameters/recipeId'
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
      operationId: get-recipes-id
      description: TO DO
components:
  schemas: {}
  parameters:
    recipeId:
      name: recipeId
      in: path
      required: true
      schema:
        type: integer
        minimum: 0
        format: int64
        example: 0
      description: Unique identifier.
tags:
  - name: recipes
