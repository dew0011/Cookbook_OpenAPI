openapi: 3.0.0
info:
  title: Cookbook-OpenAPI
  version: '1.0'
  contact:
    name: Chef
    url: awesome_cookbook/contact.com
    email: cookbook_chef@gmail.com
  license:
    name: GNU General Public License v3.0
  description: |-
    A mini API to store and manage recipes for integration into your application. Recipe meta data, preparation steps and ingredients are accessed separately, optimising load times and display flexibility. 

    ### Main Functionality

    `recipes`: Create a recipe or search the database or modify existing recipes

    `recipes/{recipeId}/preparation`: Fully customise the display and content of the preparation steps in html - list, blog, pictorial cues, the choice is yours. (See <preparation.example> for details on the suggested formatting and for our pre-built html templates.)
     
    `recipes/{recipeId}/ingredients`: Build an ingredients list that automatically calculates calories behind the scenes. Order the products in the list to showcase promotional products. 
     
  termsOfService: awesome_cookbook.com
servers:
  - url: 'http://localhost:3000'
paths:
  '/recipes/{recipeId}/ingredients':
    parameters:
      - $ref: '#/components/parameters/recipeId'
    get:
      summary: GET ingredient list
      operationId: get-recipes-recipeId-ingredients
      description: Retreive the list of ingredients for a specific recipe.
      parameters: []
      responses:
        '200':
          description: Returns an array of ingredients.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IngredientList'
              examples: {}
        '404':
          $ref: '#/components/responses/404Recipe'
      tags:
        - ingredients
    put:
      summary: PUT ingredient list update
      operationId: put-recipes-recipeId-ingredients
      responses:
        '200':
          description: Recipe successfully updated.
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404Recipe'
      description: |-
        Update the ingredients of a specific recipe. This can also be used to update the order of multiple products in the ingredients list at once. 

        **Warning**: The content of the request body overwrites all existing ingredients for the recipe. Please make sure all ingredients, including those wihtout changes, are included in the request body.
      parameters: []
      tags:
        - ingredients
  /recipes:
    get:
      summary: GET recipes
      operationId: get-recipes
      parameters:
        - schema:
            type: array
            items:
              type: integer
              format: int64
            minItems: 0
            example:
              - 1
              - 200
          in: query
          name: calories
          description: 'Range of calories from min to max. '
        - schema:
            type: integer
            example: 60
          in: query
          name: time
          description: Max. preparation time in minutes.
        - schema:
            type: string
            example: Banana and yoghurt parfait
            maxLength: 50
          in: query
          name: name
          description: Search for word/s present in the recipe title. Separate multiple search terms with commas. Search can include grep patterns.
        - schema:
            type: string
          in: query
          name: ingredient
          description: 'Search for a recipe with a specific ingredient. Separate multiple search terms with commas. Search can include grep patterns. '
        - schema:
            type: string
            enum:
              - vegan
              - mediterranean
              - vegetarian
            example: vegan
          in: query
          name: type
          description: 'Tag defining a subset of recipes by cuisine or diet. For a full list of tags see: www.some-link-to-tags.com'
      description: Search for recipes. If no query parameter is set a list of all recipes (paginated) will be returned sorted by recipe id.
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipeSummary'
              examples:
                Banana parfait:
                  value:
                    - recipeId: 0
                      name: Banana and yoghurt parfait
                      photo: 'http://photo/location'
                      description: Delicious creamy sweet treat with a hint of cinnamon.
                      type: vegan
                      calories: 100
                      time: '2'
          description: 'Returns a list of recipes that match the search query. The summary includes a name, photo, description, the total calories and preparation time. '
        '404':
          $ref: '#/components/responses/404Recipe'
      tags:
        - recipes
    parameters: []
    post:
      summary: POST new recipe
      operationId: post-recipes
      responses:
        '200':
          description: Recipe succesfully created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  recipeId:
                    $ref: '#/components/schemas/RecipeId'
                  message:
                    type: string
                    example: Success! This is the ID of your new recipe.
              examples:
                Created a new recipe:
                  value:
                    recipeId: 136
                    message: Success! This is the ID of your new recipe.
        '400':
          $ref: '#/components/responses/400'
      description: |-
        This adds a new recipe summary to the API. 

        On creation the recipe is assigned a unique recipeId and blank preparation and ingredient lists are auto-generated. These can be updated at the /recipes/{recipeId}/preparation or /recipes/{recipeId}/ingredients endpoints with [PUT] methods.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeName:
                  $ref: '#/components/schemas/RecipeName'
                photo:
                  $ref: '#/components/schemas/Photo'
                description:
                  $ref: '#/components/schemas/Description'
                diet:
                  $ref: '#/components/schemas/Diet'
                calories:
                  $ref: '#/components/schemas/Calories'
                preparationTime:
                  $ref: '#/components/schemas/PreparationTime'
              required:
                - recipeName
        description: 'Calories may be specified here or this information can be calculated from the ingredients list once created. '
      tags:
        - recipes
  '/recipes/{recipeId}/preparation':
    parameters:
      - $ref: '#/components/parameters/recipeId'
    get:
      summary: GET preparation steps
      responses:
        '200':
          description: 'Returns the preparation steps in html format. '
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/Preparation'
          headers: {}
        '204':
          $ref: '#/components/responses/204'
        '404':
          $ref: '#/components/responses/404Recipe'
      operationId: get-recipes-recipeid-preparation
      description: Retrieve the preparation steps for a specific recipe.
      tags:
        - preparation
    put:
      summary: PUT preparation steps update
      operationId: put-recipes-recipeId-preparation
      responses:
        '200':
          description: Recipe successfully updated.
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404Recipe'
      description: |-
        Update the preparation steps for a specific recipe. 

        **Warning**: The content of the request body overwrites the existing preparation steps for the recipe. Please make sure the entire preparation steps are included, even sections where edits were not made.
      requestBody:
        content:
          text/html:
            schema:
              $ref: '#/components/schemas/Preparation'
            examples:
              Banana parfait:
                value: <ol> 1. Slice the banana <br> 2. Layer the banana into the bowl <br> 3. Add a the yoghurt <br> 4. Sprinkle with cinnamon</ol>
              Methods removed:
                value: <!-- All methods removed -->
        description: |-
          For consistency and to aid in rendering the text in your application we recommend that the text contains an ordered list, descending from 1. Please see <preparation.example> for further details on the suggested formatting.


          Note: To delete all existing steps you may upload an empty html string. We recommend leaving commented out string noting this change.
      parameters: []
      tags:
        - preparation
  '/recipes/{recipeId}':
    parameters:
      - $ref: '#/components/parameters/recipeId'
    get:
      summary: GET recipe summary
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeSummary'
              examples:
                Banana and yoghurt parfait:
                  value:
                    recipeId: 0
                    name: Banana and yoghurt parfait
                    photo: 'http://photo/location'
                    description: Delicious creamy sweet treat with a hint of cinnamon.
                    type: vegan
                    calories: 100
                    time: '2'
          description: Returns a single recipe summary.
        '404':
          $ref: '#/components/responses/404Recipe'
      operationId: get-recipes-recipeid
      description: 'Retrieve the summary for a specific recipe. '
      tags:
        - recipes
    delete:
      summary: DELETE recipe
      operationId: delete-recipes-recipeId
      responses:
        '200':
          description: Recipe deleted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  Message:
                    type: string
                    example: Recipe was succesfully deleted.
              examples:
                Recipe deleted:
                  value:
                    Message: Recipe was succesfully deleted.
        '404':
          $ref: '#/components/responses/404Recipe'
      description: |-
        Entirely remove a specific recipe from the API. 

        **Warning**: This operation cannot be undone.
      tags:
        - recipes
    put:
      summary: PUT recipe summary update
      operationId: put-recipes-recipeId
      responses:
        '200':
          description: |-
            Recipe successfully updated.

            The full summary is returned so the changes can be viewed in context.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeSummary'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404Recipe'
        '415':
          description: Unsupported media type
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: ''
                    example: 'Unsupported media type. Please ensure the path to the image is correct and that it is a .png, .jpeg or .svg file.'
              examples:
                Unsupported media type:
                  value:
                    message: 'Unsupported media type. Please ensure the path to the image is correct and that it is a .png, .jpeg or .svg file.'
      description: 'Update the recipe summary. All key and value pairs must be supplied for the update to be successful. '
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeSummary'
        description: 'Format needed to update the summry information. '
      tags:
        - recipes
  '/recipes/{recipeId}/ingredients/{ingredientId}':
    parameters:
      - $ref: '#/components/parameters/recipeId'
      - $ref: '#/components/parameters/ingredientId'
    put:
      summary: PUT ingredient update
      operationId: put-recipes-recipeId-ingredients-productId
      responses:
        '200':
          description: |-
            Recipe successfully updated.

            The full ingredient list is returned so the changes can be viewed in context.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IngredientList'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404Recipe'
      description: |-
        Updates a single product in the ingredients list of a specific recipe.

        If many changes to multiple products please consider using: PUT /recipes/{recipeId}/ingredients.

        **Warning**: This may update the `order` of other ingredients, please take care if performing consecutive operations on this endpoint.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ingredient'
            examples:
              Milk:
                value:
                  productId: MILK
                  amount: 50
                  units: mL
                  order: 1
        description: 'Full details on the products and data available in the Ingredients API can be found here: https://ingredients-API-URl.com. A productId must be present in the Ingredients API before it can be used in a recipe.'
      tags:
        - ingredients
    delete:
      summary: DELETE product
      operationId: delete-recipes-recipeId-ingredients-productId
      responses:
        '200':
          description: |-
            Product deleted.

            The full ingredient list is returned so the changes can be viewed in context.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IngredientList'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404Recipe'
      description: |-
        Deletes a single product from the ingredients list. 

        **Warning**: This operation cannot be undone. This may update the `order` of other ingredients, please take care if performing consecutive operations on this endpoint.
      tags:
        - ingredients
    get:
      summary: GET ingredient
      operationId: get-recipes-recipeId-ingredients-ingredientId
      responses:
        '200':
          description: Returns the ingredient.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ingredient'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404Recipe'
      description: Retrieve a specific ingredient from the ingredients list.
      tags:
        - ingredients
components:
  schemas:
    RecipeSummary:
      title: RecipeSummary
      type: object
      x-examples:
        example-1:
          recipeName: Banana parfait
          photo: 'http://photo-location'
          description: Delicious creamy sweet treat with a hint of cinnamon.
          diet: classic
          calories: 100
          preparationTime: 2
      description: ''
      properties:
        recipeName:
          $ref: '#/components/schemas/RecipeName'
        photo:
          $ref: '#/components/schemas/Photo'
        description:
          $ref: '#/components/schemas/Description'
        diet:
          $ref: '#/components/schemas/Diet'
        calories:
          $ref: '#/components/schemas/Calories'
        preparationTime:
          $ref: '#/components/schemas/PreparationTime'
    Order:
      type: integer
      title: Order
      description: 'The position within the list. Within the API, ordinal numbers are scaled to leave spaces for updating the order with PUT and DELETE methods.'
      x-examples:
        Order: 1
      format: int64
      minimum: 0
      example: 1
    RecipeId:
      type: integer
      title: RecipeId
      format: int64
      description: Unique recipe identifier.
      example: 136
      minimum: 0
    Preparation:
      type: string
      title: Preparation
      description: The preparation steps in html format.
      x-examples:
        Banana parfait preparation: <ol> 1. Slice the banana <br> 2. Layer the banana into the bowl <br> 3. Add a the yoghurt <br> 4. Sprinkle with cinnamon</ol>
        Empty html string: <!-- All methods removed -->
      example: <ol> 1. Slice the banana <br> 2. Layer the banana into the bowl <br> 3. Add a the yoghurt <br> 4. Sprinkle with cinnamon</ol>
      minLength: 0
    ProductId:
      type: string
      title: ProductId
      description: 'ProductId that corresponds with the Ingredients API: https://ingredients-API-URl.com.'
      example: MILK
    Ingredient:
      title: Ingredient
      type: object
      x-examples:
        Milk:
          productId: MILK
          amount: 50
          units: mL
          order: 1
      properties:
        productId:
          $ref: '#/components/schemas/ProductId'
        amount:
          $ref: '#/components/schemas/Amount'
        units:
          $ref: '#/components/schemas/Units'
        order:
          $ref: '#/components/schemas/Order'
      required:
        - productId
        - amount
        - units
    Amount:
      type: number
      description: Amount of the product needed.
      minimum: 0
      example: 50
      x-examples: {}
    Units:
      title: Units
      description: The unit of measurement.
      example: mL
      enum:
        - mL
        - g
        - kg
        - cup
        - tbsp
        - tsp
        - pinch
        - L
      x-examples: {}
      type: string
    IngredientList:
      title: IngredientList
      type: object
      x-examples: {}
      properties:
        order:
          $ref: '#/components/schemas/Order'
        productId:
          $ref: '#/components/schemas/ProductId'
        amount:
          $ref: '#/components/schemas/Amount'
        units:
          $ref: '#/components/schemas/Units'
        ingredientId:
          type: integer
          example: 3
          minimum: 0
          description: Unique identifier of the ingredient.
    RecipeName:
      type: string
      title: RecipeName
      example: Banana parfait
      description: Name of the recipe.
      x-examples: {}
      maxLength: 50
    Photo:
      type: string
      title: Photo
      description: 'Path to the current location of an image of the prepared recipe. File types: .png, .jpeg or .svg'
      format: uri
      example: 'http://photo-location'
    Description:
      type: string
      title: Description
      description: Short paragraph describing the recipe.
      example: Delicious creamy sweet treat with a hint of cinnamon.
      maxLength: 250
    Diet:
      type: string
      title: Diet
      description: Any diet or cuisine sub-categories the recipe is assigned to.
      enum:
        - vegan
        - vegetarian
        - classic
      example: classic
      x-examples: {}
    Calories:
      title: Calories
      description: The total calories.
      example: 100
      type: number
    PreparationTime:
      type: number
      title: PreparationTime
      description: The estimated preparation time in minutes.
      example: 2
      minimum: 1
  parameters:
    recipeId:
      name: recipeId
      in: path
      required: true
      schema:
        type: integer
        minimum: 0
        format: int64
        example: 136
      description: Unique recipe identifier.
    ingredientId:
      name: ingredientId
      in: path
      required: true
      schema:
        type: integer
        format: int64
        minimum: 0
        example: 3
      description: Unique identifier of the ingredient.
  responses:
    '204':
      description: 'There is no content in this section. '
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: No content
          examples:
            Example:
              value:
                message: No content
    '400':
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Bad Request
          examples:
            Bad Request:
              value:
                message: Bad Request
    404RecipeStep:
      description: Not found.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Step not found
          examples:
            Recipe not found:
              value:
                message: Recipe not found
            Step not found:
              value:
                message: Step not found
    404Recipe:
      description: Not found.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Recipe not found
          examples:
            Recipe not found:
              value:
                id: Recipe not found
  examples: {}
tags:
  - name: recipes
  - name: ingredients
  - name: preparation
