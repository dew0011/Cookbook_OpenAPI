openapi: 3.0.0
info:
  title: Cookbook-OpenAPI
  version: '1.0'
  contact:
    name: Chef
    url: low_calory_cookbook/contact.com
    email: calory_master@gmail.com
  license:
    name: GNU General Public License v3.0
  description: Retrieve low-calory recipes.
  termsOfService: low_calory_cookbook.com
servers:
  - url: 'http://localhost:3000'
paths:
  '/recipes/{recipeId}/ingredients':
    parameters:
      - $ref: '#/components/parameters/recipeId'
    get:
      summary: GET
      tags:
        - get
      operationId: get-recipes-recipeId-ingredients
      description: Retreive the list of ingredients for a specific recipe.
      parameters: []
      responses:
        '200':
          description: Returns an array of ingredients.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ingredient'
              examples: {}
        '404':
          $ref: '#/components/responses/404Recipe'
    put:
      tags:
        - put
      summary: PUT update of recipe ingredients
      operationId: put-recipes-recipeId-ingredients
      responses:
        '200':
          description: Recipe successfully updated.
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404Recipe'
      description: |-
        Update the ingredients of a specific recipe. 

        **Warning**: The content of the request body overwrites all existing ingredients for the recipe. Please make sure all ingredients, including those wihtout changes, are included in the request body.
  /recipes:
    get:
      summary: GET recipes based on a search query
      tags:
        - get
      operationId: get-recipes
      parameters:
        - schema:
            type: array
            items:
              type: integer
              format: int64
            minItems: 0
            example:
              - 1
              - 200
          in: query
          name: calories
          description: 'Range of calories from min to max. '
        - schema:
            type: integer
            example: 60
          in: query
          name: time
          description: Max. preparation time in minutes.
        - schema:
            type: string
            example: Banana and yoghurt parfait
            maxLength: 50
          in: query
          name: name
          description: Search for word/s present in the recipe title. Separate multiple search terms with commas. Search can include grep patterns.
        - schema:
            type: string
          in: query
          name: ingredient
          description: 'Search for a recipe with a specific ingredient. Separate multiple search terms with commas. Search can include grep patterns. '
        - schema:
            type: string
            enum:
              - vegan
              - mediterranean
              - vegetarian
            example: vegan
          in: query
          name: type
          description: 'Tag defining a subset of recipes by cuisine or diet. For a full list of tags see: www.some-link-to-tags.com'
      description: Search for recipes. If no query parameter is set a list of all recipes (paginated) will be returned sorted by recipe id.
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipeSummary'
              examples:
                Banana parfait:
                  value:
                    - recipeId: 0
                      name: Banana and yoghurt parfait
                      photo: 'http://photo/location'
                      description: Delicious creamy sweet treat with a hint of cinnamon.
                      type: vegan
                      calories: 100
                      time: '2'
          description: 'Returns a list of recipes that match the search query. The summary includes a name, photo, description, the total calories and preparation time. '
        '404':
          $ref: '#/components/responses/404Recipe'
    parameters: []
    post:
      summary: POST a new recipe
      operationId: post-recipes
      responses:
        '200':
          description: Recipe succesfully created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  recipeId:
                    $ref: '#/components/schemas/RecipeId'
                  message:
                    type: string
                    example: Success! This is the ID of your new recipe.
              examples:
                Created a new recipe:
                  value:
                    recipeId: 136
                    message: Success! This is the ID of your new recipe.
        '400':
          $ref: '#/components/responses/400'
      description: |-
        This adds a new recipe summary to the API. 

        On creation the recipe is assigned a unique recipeId and blank preparation and ingredient lists are auto-generated. These can be updated at the /recipes/{recipeId}/preparation or /recipes/{recipeId}/ingredients endpoints with [PUT] methods.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeName:
                  $ref: '#/components/schemas/RecipeName'
                photo:
                  $ref: '#/components/schemas/Photo'
                description:
                  $ref: '#/components/schemas/Description'
                diet:
                  $ref: '#/components/schemas/Diet'
                calories:
                  $ref: '#/components/schemas/Calories'
                preparationTime:
                  $ref: '#/components/schemas/PreparationTime'
              required:
                - recipeName
      tags:
        - post
  '/recipes/{recipeId}/preparation':
    parameters:
      - $ref: '#/components/parameters/recipeId'
    get:
      summary: GET recipe methods
      tags:
        - get
      responses:
        '200':
          description: Returns an array of recipe steps.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Step'
              examples:
                Banana and yoghurt parfait:
                  value:
                    - order: 0
                      instruction: Chop the banana into thin slices.
                    - order: 1
                      instruction: Place in a small bowl with the yoghurt.
                    - order: 2
                      instruction: Sprinkle with cinnamon.
        '404':
          $ref: '#/components/responses/404Recipe'
      operationId: get-recipes-recipeid-preparation
      description: Retrieve the methods for a specific recipe.
    put:
      tags:
        - put
      summary: Put update to recipe methods
      operationId: put-recipes-recipeId-preparation
      responses:
        '200':
          description: Recipe successfully updated.
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404Recipe'
      description: |-
        Update the entire methods section of a specific recipe. Use this to add methods to a new recipe without any pre-existing methods. To update individual steps separately please see: PUT /recipes/{recipeId}/preparation/{stepId}

        **Warning**: The content of the request body overwrites all existing methods for the recipe. Please make sure all steps, including those wihtout changes, are included in the request body.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Step'
            examples:
              Banana parfait:
                value:
                  - order: 0
                    instruction: Chop the banana into thin slices.
                  - order: 1
                    instruction: Layer half in small bowl and cover with half of the yoghurt.
                  - order: 2
                    instruction: Repeat with remaining banana and yoghurt.
                  - order: 3
                    instruction: Sprinkle with cinnamon.
        description: An array of steps to perform.
  '/recipes/{recipeId}':
    parameters:
      - $ref: '#/components/parameters/recipeId'
    get:
      summary: GET recipe summary
      tags:
        - get
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeSummary'
              examples:
                Banana and yoghurt parfait:
                  value:
                    recipeId: 0
                    name: Banana and yoghurt parfait
                    photo: 'http://photo/location'
                    description: Delicious creamy sweet treat with a hint of cinnamon.
                    type: vegan
                    calories: 100
                    time: '2'
          description: Returns a single recipe summary.
        '404':
          $ref: '#/components/responses/404Recipe'
      operationId: get-recipes-recipeid
      description: 'Retrieve the summary for a specific recipe. '
    delete:
      tags:
        - delete
      summary: DELETE recipe
      operationId: delete-recipes-recipeId
      responses:
        '200':
          description: Recipe deleted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  Message:
                    type: string
                    example: Recipe was succesfully deleted.
              examples:
                Recipe deleted:
                  value:
                    Message: Recipe was succesfully deleted.
        '404':
          $ref: '#/components/responses/404Recipe'
      description: |-
        Entirely remove a specific recipe from the API. 

        **Warning**: This operation cannot be undone.
    put:
      tags:
        - put
      summary: PUT update to recipe summary
      operationId: put-recipes-recipeId
      responses:
        '200':
          description: |-
            Recipe successfully updated.

            The full summary is returned so the changes can be viewed in context.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeSummary'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404Recipe'
        '415':
          description: Unsupported media type
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: ''
                    example: 'Unsupported media type. Please ensure the path to the image is correct and that it is a .png, .jpeg or .svg file.'
              examples:
                Unsupported media type:
                  value:
                    message: 'Unsupported media type. Please ensure the path to the image is correct and that it is a .png, .jpeg or .svg file.'
      description: 'Update the recipe summary. All key and value pairs must be supplied for the update to be successful. '
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeSummary'
        description: 'Format needed to update the summry information. '
  '/recipes/{recipeId}/ingredients/{order}':
    parameters:
      - $ref: '#/components/parameters/recipeId'
      - $ref: '#/components/parameters/order'
    put:
      tags:
        - put
      summary: PUT update to product
      operationId: put-recipes-recipeId-ingredients-productId
      responses:
        '200':
          description: |-
            Recipe successfully updated.

            The full ingredient list is returned so the changes can be viewed in context.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ingredient'
              examples: {}
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404Recipe'
      description: |-
        Updates a single product in the ingredients list of a specific recipe based on its ordinal position.

        If many changes to multiple products are needed or to change the order of ingredients please use: PUT /recipes/{recipeId}/ingredients.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        description: 'Full details on the products and data available in the Ingredients API can be found here: https://ingredients-API-URl.com'
    delete:
      tags:
        - delete
      summary: DELETE product
      operationId: delete-recipes-recipeId-ingredients-productId
      responses:
        '200':
          description: |-
            Product deleted.

            The full ingredient list is returned so the changes can be viewed in context.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ingredient'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404Recipe'
      description: |-
        Deletes a single product from the ingredients list based on its ordinal position. 

        **Warning**: This operation cannot be undone. This may update the `order` of other ingredients, please take care if performing consecutive operations on this endpoint.
  '/recipes/{recipeId}/preparation/{order}':
    parameters:
      - $ref: '#/components/parameters/recipeId'
      - $ref: '#/components/parameters/order'
    put:
      summary: PUT update to preparation step
      operationId: put-recipes-recipeId-preparation-stepId
      responses:
        '200':
          description: |-
            Recipe succesfully updated.

            All steps of the recipe are returned so the updated step can be viewed in context.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Preparation'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404RecipeStep'
      description: |-
        Updates a single preparation step in a specific recipe based on its ordinal position. 

        If many changes to multiple steps are needed or to change the order of steps please use: PUT /recipes/{recipeId}/preparation.
      tags:
        - put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Instruction'
            examples:
              Step 3:
                value: Spread the avocado onto the cracker.
        description: 'It is recommended that the string is in plain text. Markdown is not explicitly supported and may not display as expected. '
    delete:
      tags:
        - delete
      summary: DELETE preparation step
      operationId: delete-recipes-recipeId-preparation-stepId
      responses:
        '200':
          description: |-
            Step deleted.

            All steps of the recipe are returned so the remaining steps can be viewed in context.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Preparation'
              examples: {}
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404RecipeStep'
      description: |-
        Deletes a single preparation step based on its ordinal position. 

        **Warning**: This operation cannot be undone. This may update the `order` of other steps, please take care if performing consecutive operations on this endpoint.
components:
  schemas:
    RecipeSummary:
      title: RecipeSummary
      type: object
      x-examples:
        example-1:
          recipeName: Banana parfait
          photo: 'http://photo-location'
          description: Delicious creamy sweet treat with a hint of cinnamon.
          diet: classic
          calories: 100
          preparationTime: 2
      description: ''
      properties:
        recipeName:
          $ref: '#/components/schemas/RecipeName'
        photo:
          $ref: '#/components/schemas/Photo'
        description:
          $ref: '#/components/schemas/Description'
        diet:
          $ref: '#/components/schemas/Diet'
        calories:
          $ref: '#/components/schemas/Calories'
        preparationTime:
          $ref: '#/components/schemas/PreparationTime'
    Step:
      title: Step
      type: object
      x-examples:
        example-1:
          order: 1
          instruction: Spread the avocado onto the cracker.
      properties:
        order:
          $ref: '#/components/schemas/Order'
        instruction:
          $ref: '#/components/schemas/Instruction'
    Order:
      type: integer
      title: Order
      description: 'The position within the list. Within the API, ordinal numbers are scaled to leave spaces for updating the order with PUT and DELETE methods.'
      x-examples:
        Order: 1
      format: int64
      minimum: 0
      example: 1
    RecipeId:
      type: integer
      title: RecipeId
      format: int64
      description: Unique recipe identifier.
      example: 136
      minimum: 0
    Preparation:
      title: Preparation
      type: array
      description: Example of a recipe with three steps.
      x-examples:
        example-1:
          - step1:
              order: 1
              instruction: Spread the avocado onto the cracker.
            step2:
              order: 1
              instruction: Spread the avocado onto the cracker.
            step3:
              order: 1
              instruction: Spread the avocado onto the cracker.
      items:
        type: object
        properties:
          step1:
            $ref: '#/components/schemas/Step'
          step2:
            $ref: '#/components/schemas/Step'
          step3:
            $ref: '#/components/schemas/Step'
    Instruction:
      type: string
      title: Instruction
      example: Spread the avocado onto the cracker.
      description: The instruction for the recipe.
      x-examples:
        Step 1: Spread the avocado onto the cracker.
    productId:
      type: string
      title: productId
      description: 'ProductId that corresponds with the Ingredients API: https://ingredients-API-URl.com. A product must be registered in the Ingredients API before it can be used in a recipe.'
      example: MILK
    Product:
      title: Product
      type: object
      properties:
        productId:
          $ref: '#/components/schemas/productId'
        amount:
          $ref: '#/components/schemas/Amount'
        units:
          $ref: '#/components/schemas/Units'
      required:
        - productId
        - amount
        - units
      x-examples: {}
    Amount:
      type: number
      description: Amount of the product needed.
      minimum: 0
      example: 50
      x-examples: {}
    Units:
      title: Units
      description: The unit of measurement.
      example: mL
      enum:
        - mL
        - g
        - kg
        - cup
        - tbsp
        - tsp
        - pinch
        - L
      x-examples: {}
      type: string
    Ingredient:
      title: Ingredient
      type: object
      properties:
        order:
          $ref: '#/components/schemas/Order'
        productId:
          $ref: '#/components/schemas/productId'
        amount:
          $ref: '#/components/schemas/Amount'
        units:
          $ref: '#/components/schemas/Units'
    RecipeName:
      type: string
      title: RecipeName
      example: Banana parfait
      description: Name of the recipe.
      x-examples: {}
      maxLength: 50
    Photo:
      type: string
      title: Photo
      description: 'Path to the current location of an image of the prepared recipe. File types: .png, .jpeg or .svg'
      format: uri
      example: 'http://photo-location'
    Description:
      type: string
      title: Description
      description: Short paragraph describing the recipe.
      example: Delicious creamy sweet treat with a hint of cinnamon.
      maxLength: 250
    Diet:
      type: string
      title: Diet
      description: Any diet or cuisine sub-categories the recipe is assigned to.
      enum:
        - vegan
        - vegetarian
        - classic
      example: classic
      x-examples: {}
    Calories:
      title: Calories
      description: The total calories.
      example: 100
      type: number
    PreparationTime:
      type: number
      title: PreparationTime
      description: The estimated preparation time in minutes.
      example: 2
      minimum: 1
  parameters:
    recipeId:
      name: recipeId
      in: path
      required: true
      schema:
        type: integer
        minimum: 0
        format: int64
        example: 136
      description: Unique recipe identifier.
    order:
      name: order
      in: path
      required: true
      schema:
        type: integer
        format: int64
        minimum: 0
        example: 3
      description: Ordinal position of item in list.
  responses:
    '400':
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Bad Request
          examples:
            Bad Request:
              value:
                message: Bad Request
    404RecipeStep:
      description: Not found.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Step not found
          examples:
            Recipe not found:
              value:
                message: Recipe not found
            Step not found:
              value:
                message: Step not found
    404Recipe:
      description: Not found.
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
                example: Recipe not found
          examples:
            Recipe not found:
              value:
                id: Recipe not found
  examples: {}
tags:
  - name: get
  - name: put
  - name: delete
  - name: post
